// Autogenerated by show_n_factor.cpp

#include "scrypt.hpp"
#include "main.h"

namespace scrypt {

scratchpad_ptr get_scratchpad(n_factor_t n_factor)
{
  using namespace std;

  if (n_factor == n_factor_t(1024, 8, 1))
    // Tue May  6 16:51:15 2014
    return scratchpad_ptr(new scratchpad<1024, 8, 1>);
  else if (n_factor == n_factor_t(1024, 9, 1))
    // Tue Apr  7 16:51:15 2015
    return scratchpad_ptr(new scratchpad<1024, 9, 1>);
  else if (n_factor == n_factor_t(2048, 9, 1))
    // Tue Oct 27 16:51:15 2015
    return scratchpad_ptr(new scratchpad<2048, 9, 1>);
  else if (n_factor == n_factor_t(2048, 10, 1))
    // Thu Mar 10 16:51:15 2016
    return scratchpad_ptr(new scratchpad<2048, 10, 1>);
  else if (n_factor == n_factor_t(2048, 11, 1))
    // Fri Feb 10 16:51:15 2017
    return scratchpad_ptr(new scratchpad<2048, 11, 1>);
  else if (n_factor == n_factor_t(4096, 11, 1))
    // Wed Apr 19 16:51:15 2017
    return scratchpad_ptr(new scratchpad<4096, 11, 1>);
  else if (n_factor == n_factor_t(4096, 12, 1))
    // Sun Jan 14 16:51:15 2018
    return scratchpad_ptr(new scratchpad<4096, 12, 1>);
  else if (n_factor == n_factor_t(8192, 12, 1))
    // Thu Oct 11 16:51:15 2018
    return scratchpad_ptr(new scratchpad<8192, 12, 1>);
  else if (n_factor == n_factor_t(8192, 13, 1))
    // Mon Dec 17 16:51:15 2018
    return scratchpad_ptr(new scratchpad<8192, 13, 1>);
  else if (n_factor == n_factor_t(8192, 14, 1))
    // Wed Nov 20 16:51:15 2019
    return scratchpad_ptr(new scratchpad<8192, 14, 1>);
  else if (n_factor == n_factor_t(16384, 14, 1))
    // Fri Apr  3 16:51:15 2020
    return scratchpad_ptr(new scratchpad<16384, 14, 1>);
  else if (n_factor == n_factor_t(16384, 15, 1))
    // Thu Oct 22 16:51:15 2020
    return scratchpad_ptr(new scratchpad<16384, 15, 1>);
  else if (n_factor == n_factor_t(16384, 16, 1))
    // Sat Sep 25 16:51:15 2021
    return scratchpad_ptr(new scratchpad<16384, 16, 1>);
  else if (n_factor == n_factor_t(16384, 17, 1))
    // Sun Mar 13 16:51:15 2022
    return scratchpad_ptr(new scratchpad<16384, 17, 1>);
  else if (n_factor == n_factor_t(16384, 18, 1))
    // Sun Aug 28 16:51:15 2022
    return scratchpad_ptr(new scratchpad<16384, 18, 1>);
  else if (n_factor == n_factor_t(16384, 19, 1))
    // Mon Feb 13 16:51:15 2023
    return scratchpad_ptr(new scratchpad<16384, 19, 1>);
  else if (n_factor == n_factor_t(32768, 19, 1))
    // Sun Mar 19 16:51:15 2023
    return scratchpad_ptr(new scratchpad<32768, 19, 1>);
  else if (n_factor == n_factor_t(32768, 20, 1))
    // Tue Aug  1 16:51:15 2023
    return scratchpad_ptr(new scratchpad<32768, 20, 1>);
  else if (n_factor == n_factor_t(32768, 21, 1))
    // Wed Jan 17 16:51:15 2024
    return scratchpad_ptr(new scratchpad<32768, 21, 1>);
  else if (n_factor == n_factor_t(32768, 22, 1))
    // Wed Jul  3 16:51:15 2024
    return scratchpad_ptr(new scratchpad<32768, 22, 1>);
  else if (n_factor == n_factor_t(65536, 22, 1))
    // Mon Sep  9 16:51:15 2024
    return scratchpad_ptr(new scratchpad<65536, 22, 1>);
  else if (n_factor == n_factor_t(65536, 23, 1))
    // Thu Dec 19 16:51:15 2024
    return scratchpad_ptr(new scratchpad<65536, 23, 1>);
  else if (n_factor == n_factor_t(65536, 24, 1))
    // Fri Jun  6 16:51:15 2025
    return scratchpad_ptr(new scratchpad<65536, 24, 1>);
  else if (n_factor == n_factor_t(65536, 25, 1))
    // Sat Nov 22 16:51:15 2025
    return scratchpad_ptr(new scratchpad<65536, 25, 1>);
  else if (n_factor == n_factor_t(131072, 25, 1))
    // Tue Mar  3 16:51:15 2026
    return scratchpad_ptr(new scratchpad<131072, 25, 1>);
  else if (n_factor == n_factor_t(131072, 26, 1))
    // Sat May  9 16:51:15 2026
    return scratchpad_ptr(new scratchpad<131072, 26, 1>);
  else if (n_factor == n_factor_t(131072, 27, 1))
    // Sun Oct 25 16:51:15 2026
    return scratchpad_ptr(new scratchpad<131072, 27, 1>);
  else if (n_factor == n_factor_t(131072, 28, 1))
    // Mon Apr 12 16:51:15 2027
    return scratchpad_ptr(new scratchpad<131072, 28, 1>);
  else if (n_factor == n_factor_t(262144, 28, 1))
    // Wed Aug 25 16:51:15 2027
    return scratchpad_ptr(new scratchpad<262144, 28, 1>);
  else if (n_factor == n_factor_t(262144, 29, 1))
    // Tue Sep 28 16:51:15 2027
    return scratchpad_ptr(new scratchpad<262144, 29, 1>);
  else if (n_factor == n_factor_t(262144, 30, 1))
    // Tue Mar 14 16:51:15 2028
    return scratchpad_ptr(new scratchpad<262144, 30, 1>);
  else if (n_factor == n_factor_t(262144, 31, 1))
    // Wed Aug 30 16:51:15 2028
    return scratchpad_ptr(new scratchpad<262144, 31, 1>);
  else if (n_factor == n_factor_t(262144, 32, 1))
    // Thu Feb 15 16:51:15 2029
    return scratchpad_ptr(new scratchpad<262144, 32, 1>);
  else if (n_factor == n_factor_t(262144, 33, 1))
    // Thu May 10 16:51:15 2029
    return scratchpad_ptr(new scratchpad<262144, 33, 1>);
  else if (n_factor == n_factor_t(262144, 34, 1))
    // Fri Aug  3 16:51:15 2029
    return scratchpad_ptr(new scratchpad<262144, 34, 1>);
  else if (n_factor == n_factor_t(262144, 35, 1))
    // Fri Oct 26 16:51:15 2029
    return scratchpad_ptr(new scratchpad<262144, 35, 1>);
  else if (n_factor == n_factor_t(262144, 36, 1))
    // Fri Jan 18 16:51:15 2030
    return scratchpad_ptr(new scratchpad<262144, 36, 1>);
  else if (n_factor == n_factor_t(262144, 37, 1))
    // Sat Apr 13 16:51:15 2030
    return scratchpad_ptr(new scratchpad<262144, 37, 1>);
  else if (n_factor == n_factor_t(262144, 38, 1))
    // Sat Jul  6 16:51:15 2030
    return scratchpad_ptr(new scratchpad<262144, 38, 1>);
  else if (n_factor == n_factor_t(524288, 38, 1))
    // Fri Aug  9 16:51:15 2030
    return scratchpad_ptr(new scratchpad<524288, 38, 1>);
  else if (n_factor == n_factor_t(524288, 39, 1))
    // Sat Sep 28 16:51:15 2030
    return scratchpad_ptr(new scratchpad<524288, 39, 1>);
  else if (n_factor == n_factor_t(524288, 40, 1))
    // Sun Dec 22 16:51:15 2030
    return scratchpad_ptr(new scratchpad<524288, 40, 1>);
  else if (n_factor == n_factor_t(524288, 41, 1))
    // Sun Mar 16 16:51:15 2031
    return scratchpad_ptr(new scratchpad<524288, 41, 1>);
  else if (n_factor == n_factor_t(524288, 42, 1))
    // Mon Jun  9 16:51:15 2031
    return scratchpad_ptr(new scratchpad<524288, 42, 1>);
  else if (n_factor == n_factor_t(524288, 43, 1))
    // Mon Sep  1 16:51:15 2031
    return scratchpad_ptr(new scratchpad<524288, 43, 1>);
  else if (n_factor == n_factor_t(524288, 44, 1))
    // Mon Nov 24 16:51:15 2031
    return scratchpad_ptr(new scratchpad<524288, 44, 1>);
  else if (n_factor == n_factor_t(1048576, 44, 1))
    // Sat Jan 31 16:51:15 2032
    return scratchpad_ptr(new scratchpad<1048576, 44, 1>);
  else if (n_factor == n_factor_t(1048576, 45, 1))
    // Tue Feb 17 16:51:15 2032
    return scratchpad_ptr(new scratchpad<1048576, 45, 1>);
  else if (n_factor == n_factor_t(1048576, 46, 1))
    // Tue May 11 16:51:15 2032
    return scratchpad_ptr(new scratchpad<1048576, 46, 1>);
  else if (n_factor == n_factor_t(1048576, 47, 1))
    // Tue Aug  3 16:51:15 2032
    return scratchpad_ptr(new scratchpad<1048576, 47, 1>);
  else if (n_factor == n_factor_t(1048576, 48, 1))
    // Wed Oct 27 16:51:15 2032
    return scratchpad_ptr(new scratchpad<1048576, 48, 1>);
  else if (n_factor == n_factor_t(1048576, 49, 1))
    // Wed Jan 19 16:51:15 2033
    return scratchpad_ptr(new scratchpad<1048576, 49, 1>);
  else if (n_factor == n_factor_t(1048576, 50, 1))
    // Thu Apr 14 16:51:15 2033
    return scratchpad_ptr(new scratchpad<1048576, 50, 1>);
  else if (n_factor == n_factor_t(1048576, 51, 1))
    // Thu Jul  7 16:51:15 2033
    return scratchpad_ptr(new scratchpad<1048576, 51, 1>);
  else if (n_factor == n_factor_t(2097152, 51, 1))
    // Sun Jul 24 16:51:15 2033
    return scratchpad_ptr(new scratchpad<2097152, 51, 1>);
  else if (n_factor == n_factor_t(2097152, 52, 1))
    // Thu Sep 29 16:51:15 2033
    return scratchpad_ptr(new scratchpad<2097152, 52, 1>);
  else if (n_factor == n_factor_t(2097152, 53, 1))
    // Fri Dec 23 16:51:15 2033
    return scratchpad_ptr(new scratchpad<2097152, 53, 1>);
  else if (n_factor == n_factor_t(2097152, 54, 1))
    // Fri Mar 17 16:51:15 2034
    return scratchpad_ptr(new scratchpad<2097152, 54, 1>);
  else if (n_factor == n_factor_t(2097152, 55, 1))
    // Fri Jun  9 16:51:15 2034
    return scratchpad_ptr(new scratchpad<2097152, 55, 1>);
  else if (n_factor == n_factor_t(2097152, 56, 1))
    // Sat Sep  2 16:51:15 2034
    return scratchpad_ptr(new scratchpad<2097152, 56, 1>);
  else if (n_factor == n_factor_t(2097152, 57, 1))
    // Sat Nov 25 16:51:15 2034
    return scratchpad_ptr(new scratchpad<2097152, 57, 1>);
  else if (n_factor == n_factor_t(2097152, 58, 1))
    // Sun Feb 18 16:51:15 2035
    return scratchpad_ptr(new scratchpad<2097152, 58, 1>);
/*  else if (n_factor == n_factor_t(2097152, 59, 1))
    // Sun May 13 16:51:15 2035
    return scratchpad_ptr(new scratchpad<2097152, 59, 1>);*/
  else 
    throw runtime_error("invalid n_factor");
}

uint256 hash(
  const CBlock& blk,
  n_factor_t n_factor,
  scratchpad_ptr scr
)
{
  using namespace std;

  const std::string in(BEGIN(blk.nVersion), 80);
  uint256 hash;

  if (n_factor == n_factor_t(1024, 8, 1))
    // Tue May  6 16:51:15 2014
    scrypt_256_sp_templ<1024, 8, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1024, 8, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1024, 9, 1))
    // Tue Apr  7 16:51:15 2015
    scrypt_256_sp_templ<1024, 9, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1024, 9, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2048, 9, 1))
    // Tue Oct 27 16:51:15 2015
    scrypt_256_sp_templ<2048, 9, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2048, 9, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2048, 10, 1))
    // Thu Mar 10 16:51:15 2016
    scrypt_256_sp_templ<2048, 10, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2048, 10, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2048, 11, 1))
    // Fri Feb 10 16:51:15 2017
    scrypt_256_sp_templ<2048, 11, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2048, 11, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(4096, 11, 1))
    // Wed Apr 19 16:51:15 2017
    scrypt_256_sp_templ<4096, 11, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<4096, 11, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(4096, 12, 1))
    // Sun Jan 14 16:51:15 2018
    scrypt_256_sp_templ<4096, 12, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<4096, 12, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(8192, 12, 1))
    // Thu Oct 11 16:51:15 2018
    scrypt_256_sp_templ<8192, 12, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<8192, 12, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(8192, 13, 1))
    // Mon Dec 17 16:51:15 2018
    scrypt_256_sp_templ<8192, 13, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<8192, 13, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(8192, 14, 1))
    // Wed Nov 20 16:51:15 2019
    scrypt_256_sp_templ<8192, 14, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<8192, 14, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(16384, 14, 1))
    // Fri Apr  3 16:51:15 2020
    scrypt_256_sp_templ<16384, 14, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<16384, 14, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(16384, 15, 1))
    // Thu Oct 22 16:51:15 2020
    scrypt_256_sp_templ<16384, 15, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<16384, 15, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(16384, 16, 1))
    // Sat Sep 25 16:51:15 2021
    scrypt_256_sp_templ<16384, 16, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<16384, 16, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(16384, 17, 1))
    // Sun Mar 13 16:51:15 2022
    scrypt_256_sp_templ<16384, 17, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<16384, 17, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(16384, 18, 1))
    // Sun Aug 28 16:51:15 2022
    scrypt_256_sp_templ<16384, 18, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<16384, 18, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(16384, 19, 1))
    // Mon Feb 13 16:51:15 2023
    scrypt_256_sp_templ<16384, 19, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<16384, 19, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(32768, 19, 1))
    // Sun Mar 19 16:51:15 2023
    scrypt_256_sp_templ<32768, 19, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<32768, 19, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(32768, 20, 1))
    // Tue Aug  1 16:51:15 2023
    scrypt_256_sp_templ<32768, 20, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<32768, 20, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(32768, 21, 1))
    // Wed Jan 17 16:51:15 2024
    scrypt_256_sp_templ<32768, 21, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<32768, 21, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(32768, 22, 1))
    // Wed Jul  3 16:51:15 2024
    scrypt_256_sp_templ<32768, 22, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<32768, 22, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(65536, 22, 1))
    // Mon Sep  9 16:51:15 2024
    scrypt_256_sp_templ<65536, 22, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<65536, 22, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(65536, 23, 1))
    // Thu Dec 19 16:51:15 2024
    scrypt_256_sp_templ<65536, 23, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<65536, 23, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(65536, 24, 1))
    // Fri Jun  6 16:51:15 2025
    scrypt_256_sp_templ<65536, 24, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<65536, 24, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(65536, 25, 1))
    // Sat Nov 22 16:51:15 2025
    scrypt_256_sp_templ<65536, 25, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<65536, 25, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(131072, 25, 1))
    // Tue Mar  3 16:51:15 2026
    scrypt_256_sp_templ<131072, 25, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<131072, 25, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(131072, 26, 1))
    // Sat May  9 16:51:15 2026
    scrypt_256_sp_templ<131072, 26, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<131072, 26, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(131072, 27, 1))
    // Sun Oct 25 16:51:15 2026
    scrypt_256_sp_templ<131072, 27, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<131072, 27, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(131072, 28, 1))
    // Mon Apr 12 16:51:15 2027
    scrypt_256_sp_templ<131072, 28, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<131072, 28, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 28, 1))
    // Wed Aug 25 16:51:15 2027
    scrypt_256_sp_templ<262144, 28, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 28, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 29, 1))
    // Tue Sep 28 16:51:15 2027
    scrypt_256_sp_templ<262144, 29, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 29, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 30, 1))
    // Tue Mar 14 16:51:15 2028
    scrypt_256_sp_templ<262144, 30, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 30, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 31, 1))
    // Wed Aug 30 16:51:15 2028
    scrypt_256_sp_templ<262144, 31, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 31, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 32, 1))
    // Thu Feb 15 16:51:15 2029
    scrypt_256_sp_templ<262144, 32, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 32, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 33, 1))
    // Thu May 10 16:51:15 2029
    scrypt_256_sp_templ<262144, 33, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 33, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 34, 1))
    // Fri Aug  3 16:51:15 2029
    scrypt_256_sp_templ<262144, 34, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 34, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 35, 1))
    // Fri Oct 26 16:51:15 2029
    scrypt_256_sp_templ<262144, 35, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 35, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 36, 1))
    // Fri Jan 18 16:51:15 2030
    scrypt_256_sp_templ<262144, 36, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 36, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 37, 1))
    // Sat Apr 13 16:51:15 2030
    scrypt_256_sp_templ<262144, 37, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 37, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(262144, 38, 1))
    // Sat Jul  6 16:51:15 2030
    scrypt_256_sp_templ<262144, 38, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<262144, 38, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 38, 1))
    // Fri Aug  9 16:51:15 2030
    scrypt_256_sp_templ<524288, 38, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 38, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 39, 1))
    // Sat Sep 28 16:51:15 2030
    scrypt_256_sp_templ<524288, 39, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 39, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 40, 1))
    // Sun Dec 22 16:51:15 2030
    scrypt_256_sp_templ<524288, 40, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 40, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 41, 1))
    // Sun Mar 16 16:51:15 2031
    scrypt_256_sp_templ<524288, 41, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 41, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 42, 1))
    // Mon Jun  9 16:51:15 2031
    scrypt_256_sp_templ<524288, 42, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 42, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 43, 1))
    // Mon Sep  1 16:51:15 2031
    scrypt_256_sp_templ<524288, 43, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 43, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(524288, 44, 1))
    // Mon Nov 24 16:51:15 2031
    scrypt_256_sp_templ<524288, 44, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<524288, 44, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 44, 1))
    // Sat Jan 31 16:51:15 2032
    scrypt_256_sp_templ<1048576, 44, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 44, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 45, 1))
    // Tue Feb 17 16:51:15 2032
    scrypt_256_sp_templ<1048576, 45, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 45, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 46, 1))
    // Tue May 11 16:51:15 2032
    scrypt_256_sp_templ<1048576, 46, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 46, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 47, 1))
    // Tue Aug  3 16:51:15 2032
    scrypt_256_sp_templ<1048576, 47, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 47, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 48, 1))
    // Wed Oct 27 16:51:15 2032
    scrypt_256_sp_templ<1048576, 48, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 48, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 49, 1))
    // Wed Jan 19 16:51:15 2033
    scrypt_256_sp_templ<1048576, 49, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 49, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 50, 1))
    // Thu Apr 14 16:51:15 2033
    scrypt_256_sp_templ<1048576, 50, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 50, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(1048576, 51, 1))
    // Thu Jul  7 16:51:15 2033
    scrypt_256_sp_templ<1048576, 51, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<1048576, 51, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 51, 1))
    // Sun Jul 24 16:51:15 2033
    scrypt_256_sp_templ<2097152, 51, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 51, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 52, 1))
    // Thu Sep 29 16:51:15 2033
    scrypt_256_sp_templ<2097152, 52, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 52, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 53, 1))
    // Fri Dec 23 16:51:15 2033
    scrypt_256_sp_templ<2097152, 53, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 53, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 54, 1))
    // Fri Mar 17 16:51:15 2034
    scrypt_256_sp_templ<2097152, 54, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 54, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 55, 1))
    // Fri Jun  9 16:51:15 2034
    scrypt_256_sp_templ<2097152, 55, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 55, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 56, 1))
    // Sat Sep  2 16:51:15 2034
    scrypt_256_sp_templ<2097152, 56, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 56, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 57, 1))
    // Sat Nov 25 16:51:15 2034
    scrypt_256_sp_templ<2097152, 57, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 57, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 58, 1))
    // Sun Feb 18 16:51:15 2035
    scrypt_256_sp_templ<2097152, 58, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 58, 1>&>(*scr).pad
    );
  else if (n_factor == n_factor_t(2097152, 59, 1))
    // Sun May 13 16:51:15 2035
    scrypt_256_sp_templ<2097152, 59, 1>(
      in, in, hash,
      dynamic_cast<scratchpad<2097152, 59, 1>&>(*scr).pad
    );
  else 
    throw runtime_error("invalid n_factor");

  return hash;
}

} // scrypt
